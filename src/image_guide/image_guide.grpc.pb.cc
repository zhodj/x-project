// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: image_guide.proto

#include "image_guide.pb.h"
#include "image_guide.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace imageguide {

static const char* ImageGuide_method_names[] = {
  "/imageguide.ImageGuide/SendImage",
};

std::unique_ptr< ImageGuide::Stub> ImageGuide::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< ImageGuide::Stub> stub(new ImageGuide::Stub(channel));
  return stub;
}

ImageGuide::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_SendImage_(ImageGuide_method_names[0], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::imageguide::Image>* ImageGuide::Stub::SendImageRaw(::grpc::ClientContext* context, ::imageguide::Response* response) {
  return new ::grpc::ClientWriter< ::imageguide::Image>(channel_.get(), rpcmethod_SendImage_, context, response);
}

::grpc::ClientAsyncWriter< ::imageguide::Image>* ImageGuide::Stub::AsyncSendImageRaw(::grpc::ClientContext* context, ::imageguide::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncWriter< ::imageguide::Image>(channel_.get(), cq, rpcmethod_SendImage_, context, response, tag);
}

ImageGuide::AsyncService::AsyncService() : ::grpc::AsynchronousService(ImageGuide_method_names, 1) {}

ImageGuide::Service::Service() {
}

ImageGuide::Service::~Service() {
}

::grpc::Status ImageGuide::Service::SendImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::imageguide::Image>* reader, ::imageguide::Response* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void ImageGuide::AsyncService::RequestSendImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::imageguide::Response, ::imageguide::Image>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* ImageGuide::Service::service() {
  if (service_) {
    return service_.get();
  }
  service_ = std::unique_ptr< ::grpc::RpcService>(new ::grpc::RpcService());
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      ImageGuide_method_names[0],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< ImageGuide::Service, ::imageguide::Image, ::imageguide::Response>(
          std::mem_fn(&ImageGuide::Service::SendImage), this)));
  return service_.get();
}


}  // namespace imageguide

